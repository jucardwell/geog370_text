quarto render
# Load required packages
library(leaflet)
install.packages("leaflet")
# Load required packages
library(leaflet)
library(sf)
install.packages("sf", "RColorBrewer")
# Load required packages
library(leaflet)
library(sf)
library(RColorBrewer)
# --- Load Vector Data ---
floodplain <- st_read("floodplain.geojson", quiet = TRUE)
## Map 1: Detailed vs Simplified Floodplain & Buildings
```{r}
library(tmap)
library(sf)
# Load GeoJSONs (replace with actual paths if different)
fp_detailed <- st_read("data/floodplain.geojson", quiet = TRUE)
fp_simple <- st_read("data/simplified_floodplain.geojson", quiet = TRUE)
bldg_pts <- st_read("data/building_centroids.geojson", quiet = TRUE)
bldg_polys <- st_read("data/building_footprints.geojson", quiet = TRUE)
tmap_mode("view")
tm1 <- tm_shape(fp_detailed) +
tm_polygons(col = "blue", alpha = 0.3) +
tm_shape(bldg_polys) +
tm_borders(col = "black") +
tm_layout(title = "Detailed Footprints + Floodplain")
tm2 <- tm_shape(fp_simple) +
tm_polygons(col = "blue", alpha = 0.3) +
tm_shape(bldg_pts) +
tm_dots(col = "black", size = 0.05) +
tm_layout(title = "Simplified Centroids + Floodplain")
tmap_arrange(tm1, tm2, ncol = 2)
# Read and prep data
bg <- st_read("data/bg_building_age.geojson", quiet = TRUE)
library(leaflet)
library(sf)
library(htmltools)
# Load spatial data
fp_detailed <- st_read("data/floodplain.geojson", quiet = TRUE)
fp_simple <- st_read("data/simplified_floodplain.geojson", quiet = TRUE)
bldg_polys <- st_read("data/building_footprints.geojson", quiet = TRUE)
bldg_pts <- st_read("data/building_centroids.geojson", quiet = TRUE)
# Map 1a: Detailed
map1_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(data = fp_detailed, color = "blue", weight = 1, fillOpacity = 0.3) |>
addPolygons(data = bldg_polys, color = "black", weight = 0.5) |>
setView(lng = -79.05, lat = 35.91, zoom = 14)
# Map 1b: Simplified
map1_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(data = fp_simple, color = "blue", weight = 1, fillOpacity = 0.3) |>
addCircleMarkers(data = bldg_pts, radius = 2, color = "black", stroke = FALSE) |>
setView(lng = -79.05, lat = 35.91, zoom = 14)
library(leafsync)
browsable(sync(map1_left, map1_right, sync.cursor = TRUE))
# Read and prep data
bg <- st_read("data/bg_building_age.geojson", quiet = TRUE)
tract <- st_read("data/tract_building_age.geojson", quiet = TRUE)
bg$SE_A10057_ <- as.numeric(bg$SE_A10057_)
tract$SE_A10057_ <- as.numeric(tract$SE_A10057_)
# Shared color scale
pal <- colorNumeric("YlOrRd", domain = c(1950, 2015), na.color = "#cccccc")
# Map 2a: Block Group
map2_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(
data = bg,
fillColor = ~pal(SE_A10057_),
fillOpacity = 0.7,
color = "#444", weight = 0.5,
label = ~paste("BG Year:", SE_A10057_)
) |>
addLegend(pal = pal, values = bg$SE_A10057_, title = "Avg. Year Built") |>
setView(lng = -79.05, lat = 35.91, zoom = 12)
# Map 2b: Tract
map2_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(
data = tract,
fillColor = ~pal(SE_A10057_),
fillOpacity = 0.7,
color = "#444", weight = 0.5,
label = ~paste("Tract Year:", SE_A10057_)
) |>
addLegend(pal = pal, values = tract$SE_A10057_, title = "Avg. Year Built") |>
setView(lng = -79.05, lat = 35.91, zoom = 12)
# Display synced maps
browsable(sync(map2_left, map2_right, sync.cursor = TRUE))
install.packages("terra")
library(terra)
library(terra)
# Load rasters using terra
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Define shared color palette
pal <- colorNumeric(
palette = "inferno",  # from viridis
domain = range(c(min(minmax(high_res)), max(minmax(high_res)),
min(minmax(low_res)), max(minmax(low_res)))),
na.color = "transparent"
)
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 13)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 13)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 10)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 13)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 10)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 10)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 8)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 8)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.8, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.7, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.7, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(terra)
library(leaflet)
library(terra)
library(leafsync)
library(htmltools)
# Load rasters
high_res <- rast("data/high_res_temp.tif")
low_res <- rast("data/low_res_temp.tif")
# Force min/max calculation
high_range <- range(values(high_res), na.rm = TRUE)
low_range <- range(values(low_res), na.rm = TRUE)
# Use combined range for color palette
combined_range <- range(c(high_range, low_range))
pal <- colorNumeric(
palette = "inferno",  # requires viridisLite
domain = combined_range,
na.color = "transparent"
)
# Map 3a: High-res
map3_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(high_res, colors = pal, opacity = 0.6, project = TRUE) |>
addLegend(pal = pal, values = high_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
# Map 3b: Low-res
map3_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addRasterImage(low_res, colors = pal, opacity = 0.6, project = TRUE) |>
addLegend(pal = pal, values = low_range, title = "Temperature") |>
setView(lng = -79.05, lat = 35.91, zoom = 9)
browsable(sync(map3_left, map3_right, sync.cursor = TRUE))
library(leaflet)
library(sf)
library(htmltools)
# Load spatial data
fp_detailed <- st_read("data/floodplain.geojson", quiet = TRUE)
fp_simple <- st_read("data/simplified_floodplain.geojson", quiet = TRUE)
bldg_polys <- st_read("data/building_footprints.geojson", quiet = TRUE)
bldg_pts <- st_read("data/building_centroids.geojson", quiet = TRUE)
# Map 1a: Detailed
map1_left <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(data = fp_detailed, color = "blue", weight = 1, fillOpacity = 0.3) |>
addPolygons(data = bldg_polys, color = "black", weight = 0.5) |>
setView(lng = -79.05, lat = 35.91, zoom = 14)
# Map 1b: Simplified
map1_right <- leaflet() |>
addProviderTiles("CartoDB.Positron") |>
addPolygons(data = fp_simple, color = "blue", weight = 1, fillOpacity = 0.3) |>
addCircleMarkers(data = bldg_pts, radius = 1, color = "black", stroke = FALSE) |>
setView(lng = -79.05, lat = 35.91, zoom = 14)
library(leafsync)
browsable(sync(map1_left, map1_right, sync.cursor = TRUE))
